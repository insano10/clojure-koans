- instead of a function call foo(arg1, arg2), a lisp writes it as (foo arg1 arg2) with the first argument the function to be called followed by the arguments
- as well as strings there are :keywords and 'symbols
- there is hard (=) and loose (==) equality
- \b is the char b (use backslash)
- [1 2 3] is a vector, (1 2 3) is a list. Use a vector when accessing via index and a list when using as a sequence
- #{1 2 3} is a set. You can create them from other collections using (set '(123))
- {:a 1 :b 2} is a map access in various ways:
    - (let [m {1 "hi" 2 "bye"}] (m 1))
    - (let [m {:a 1 :b 2}] (:a m))
- declare a named function using (defn [param1 param2] ())
- declare an anonymous function using fn or #() (access parameters with %1 %2 etc.)
- (let [foo 1 bar 2] ....) to define local variables within the parentheses

- you can use transient data structures to build up collections, then turn them back into persistents for use
  this is much faster than using persistents (https://clojure.org/reference/transients)
  use functions suffixed with ! on transient data structures

- using & in an argument declaration will bind to the rest of the args to give varargs
- for comprehensions can have modifiers (like :when to filter) and you can iterate
  through multiple sequences at the same time
    - this means you can emulate mapping and filtering over a sequence
- use references for safe mutation of shared memory. Always do stuff in transactions with dosync.
  useful when multiple data needs updating together. If it's just 1 thing use atoms
- quotes allow you to return the unevaluated expression rather than the value. This is useful for
  writing macros. Syntax quoting (`) also allows you to override this behaviour using ~ to 
  evaluate sub-parts of the expression. It will also include the namespace

- anonymous function shorthand = #(... %) where % are the arguments passed in
	- e.g. (#(+ %1 %2) 3 4) gives you 7

functions:

doc - prints the doc for the given function (like javadoc)
str - creates a string from 0 or more symbols
get - index into something (e.g. string / list)
count - count elements in something
subs - substring
string/split-lines - split a string on \n
char? - is the argument a char
string? - is the argument a string
blank? - is a string empty or nil
subvec - get a slice from a vector inclusive of lower bound, exclusive of upper bound
assoc/dissoc - add/remove values from a map
merge - combine 2 collections
map/reduce/filter - take a function and a sequence to transform the sequence
recur - perform tail recursion and jump back to the outer call site (fn or loop) with the specified args
interpose - insert a given separator between each element in a collection
cons - create a new sequence from a head and rest
iterate - returns a lazy sequence of repeatedly apply a function to a value
complement -takes a function and returns an identical one with the opposite boolean return value
comp - compose a set of functions to return a function that does them all (right to left order)
do - run multiple statements one after the other and return the value of the last one
macroexpand - see the macro behind the quoted expression
